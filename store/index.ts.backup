//redux toolkit
import { configureStore, createAction, createReducer, createStore, ThunkAction, Action } from '@reduxjs/toolkit';
import storage from 'redux-persist/lib/storage'
import { combineReducers } from "redux";
import { persistReducer } from 'redux-persist'
import { createWrapper, HYDRATE } from 'next-redux-wrapper';

// actions
const changeSource = createAction('SOURCE')

// reducer
const initialState = {
    source: 'nettruyen',
    name: 'NetTruyen',
    url: 'http://nettruyengo.com/'
}

const rootReducer = createReducer(initialState, {
    [HYDRATE]: (state = initialState, { payload }) => {
        console.log('vao day hydrate');

        return { ...state, source:'cc' }
    },
    [changeSource.type]: (state = initialState, { payload }) => {
        return { ...state, ...payload }
    },
})

const reducers = combineReducers({
    rootReducer
});

const persistConfig = {
    key: 'root',
    storage
};

const persistedReducer = persistReducer(persistConfig, reducers) //get state from localstorage if has

//tạo store có 2 cách
// cách 1
// const store = createStore(reducers)
// or cách 2
const store = configureStore({
    reducer: reducers
});

export type AppDispatch = typeof store.dispatch;
export type RootState = ReturnType<typeof store.getState>;
export type AppThunk<ReturnType = void> = ThunkAction<
    ReturnType,
    RootState,
    unknown,
    Action<string>
>;

const makeStore = () => store;

store.subscribe(() => {
    console.log('thay doi state');

});

export type AppStore = ReturnType<typeof makeStore>;
export const wrapper = createWrapper<AppStore>(makeStore, { debug: true });
